---
import SynthBase from "./SynthBase.astro";
import SynthKeyboard from "./SynthKeyboard.astro";
import SynthScreen from "./SynthScreen.astro";
---

<script>
  const STAFF_TYPE_PREFIX = "staff-";
  const NOTEHEAD_PREFIX = "note-";

  type WhiteKey =
    | "C3"
    | "D3"
    | "E3"
    | "F3"
    | "G3"
    | "A3"
    | "B3"
    | "C4"
    | "D4"
    | "E4";

  type BlackKey =
    | "Csharp3"
    | "Dsharp3"
    | "Fsharp3"
    | "Gsharp3"
    | "Asharp3"
    | "Csharp4"
    | "Dsharp4";

  export type NoteName = WhiteKey | BlackKey;

  function prepareLoadSynth() {
    const synth: HTMLElement | null | undefined =
      document.getElementById("synth");
    const start: SVGElement | null | undefined = synth?.querySelector(".start");

    start?.addEventListener("click", loadSynth);
  }

  // Helpers -----------------------------------------------------//
  function randomIntFromInterval(min: number, max: number) {
    return Math.floor(Math.random() * (max - min + 1) + min);
  }

  let timeout: NodeJS.Timeout;

  async function loadSynth() {
    const { Howler } = await import("howler");
    const { sounds } = await import("./sounds.ts");
    const { unmute } = await import("./unmute");

    Howler.autoUnlock = false;
    Howler.volume(0.5);

    const synth: HTMLElement | null | undefined =
      document.getElementById("synth");
    const keys: NodeListOf<SVGGElement> | undefined =
      synth?.querySelectorAll(".synth-key");
    const instrumentIcons: NodeListOf<SVGGElement> | undefined =
      synth?.querySelectorAll(".instrument");
    const instrumentIconWrapper: SVGGElement | null | undefined =
      synth?.querySelector(".synth-instrument");
    const noteheads: NodeListOf<SVGPolygonElement> | undefined =
      synth?.querySelectorAll(".notehead");
    const keyLetters: NodeListOf<SVGElement> | undefined =
      synth?.querySelectorAll(".key-letter");
    const prevArrow: SVGElement | null | undefined =
      synth?.querySelector(".instrument-prev");
    const nextArrow: SVGElement | null | undefined =
      synth?.querySelector(".instrument-next");

    // State -------------------------------------------------------//
    const isTouchDevice = window.matchMedia("(pointer: coarse)").matches;
    const numInstruments = sounds.instruments.length - 1;

    let activeInstrument = 0;
    let isMouseDown = false;
    // let isTouching = false;
    let noteFadeOut: NodeJS.Timeout;

    const enableSynth = () => {
      clearTimeout(timeout);

      if (synth && synth.dataset.enabled !== "true") {
        synth.dataset.enabled = "true";
        loadUISounds();
        loadInstrumentSounds();
        setRandomInstrument(revealKeyboardLetters);
      }
    };

    const loadUISounds = () => {
      for (const [_key, value] of Object.entries(sounds.ui)) {
        value.howl.load();
      }
    };

    const loadInstrumentSounds = () => {
      for (const [_key, value] of Object.entries(sounds.instruments)) {
        value.howl.load();
      }
    };

    // Instrument Chooser -----------------------------------------//
    const setRandomInstrument = (callback?: () => void) => {
      if (synth) {
        synth.dataset.loading = "true";

        const baseSpeed = randomIntFromInterval(30, 50); // Lower is faster
        const force = randomIntFromInterval(5, 30); // How hard do you 'pull down the wheel'?
        const slowestSpeed = 700; // How slow can the roulette go before ending?
        const friction = 1.3; // How quickly to put on the brakes (1 to 1.5)

        let speed = baseSpeed;
        let i = 1;

        const roulette = () => {
          nextInstrument();
          i++;

          if (speed >= slowestSpeed) {
            sounds.ui.ding.howl.play();
            synth.dataset.loading = "false";
            clearTimeout(timeout);
            if (callback) {
              callback();
            }
          } else {
            speed *= friction;
            if (i <= force) {
              speed *= 0.8;
            }
            timeout = setTimeout(roulette, speed);
          }
        };

        setTimeout(roulette, speed);
      }
    };

    const showActiveInstrumentIcon = () => {
      if (instrumentIcons) {
        instrumentIcons.forEach((icon) => {
          icon.style.display = "none";
        });
        instrumentIcons[activeInstrument].style.display = "block";
      }
    };

    const setActiveInstrument = (num: number) => {
      if (num > numInstruments) {
        num = 0;
      } else if (num < 0) {
        num = numInstruments;
      }

      activeInstrument = num;
      showActiveInstrumentIcon();
    };

    const nextInstrument = () => {
      setActiveInstrument(activeInstrument + 1);
      sounds.ui.click.howl.play();
    };

    const prevInstrument = () => {
      setActiveInstrument(activeInstrument - 1);
      sounds.ui.click.howl.play();
    };

    // Musical Staff ---------------------------------------------//
    const showActiveNotehead = (noteName: NoteName) => {
      if (synth) {
        // Clear existing fadeout timer, if one exists
        clearTimeout(noteFadeOut);
        // Immediately hide any visible noteheads
        hideNoteheads();

        const staffType = sounds.instruments[activeInstrument].staffType;
        const currentStaff = STAFF_TYPE_PREFIX + staffType;
        const currentNote: SVGElement | null = synth?.querySelector(
          `.${currentStaff} .${NOTEHEAD_PREFIX}${noteName}`,
        );

        if (currentNote) currentNote.style.display = "block";

        // Prep a timer to fade out noteheads
        // if no other actions are taken
        noteFadeOut = setTimeout(() => {
          hideNoteheads();
        }, 5000);
      }
    };

    const hideNoteheads = () => {
      noteheads?.forEach((notehead) => {
        notehead.style.display = "none";
      });
    };

    // Keyboard ----------------------------------------------------//
    const revealKeyboardLetters = () => {
      // Only show keyboard on non-touch devices
      if (!isTouchDevice) {
        keyLetters?.forEach((letter, i) => {
          setTimeout(() => {
            letter.classList.add("visible");
          }, i * 30);
        });
      }
    };

    const hideKeyboardLetters = () => {
      keyLetters?.forEach((letter) => {
        letter.classList.add("fadeout");
        setTimeout(function () {
          letter.classList.remove("visible");
        }, 2000);
      });
    };

    const pressKey = (noteName: NoteName) => {
      const keyId = document.getElementById(noteName);
      if (!keyId?.classList.contains("pressed")) {
        keyId?.classList.add("pressed");
        playNote(noteName);
        showActiveNotehead(noteName);
      }
    };

    // const pressKeyMatchingCoords = (x, y) => {
    //   keys?.forEach((key) => {
    //     let posXStart = key.offset().left;
    //     let posYStart = key.offset().top - window.scrollTop();
    //     let posXEnd = key.offset().left + key[0].getBoundingClientRect().width;
    //     let posYEnd = key.offset().top + key[0].getBoundingClientRect().height;

    //     if (x >= posXStart && x <= posXEnd && y >= posYStart && y <= posYEnd) {
    //       releaseAllKeys();
    //       let noteName = key[0].id;
    //       playNote(noteName);
    //       key.classList.add("pressed");
    //     }
    //   });
    // }

    const releaseKey = (noteName: NoteName) => {
      document.getElementById(noteName)?.classList.remove("pressed");
    };

    const releaseAllKeys = () => {
      keys?.forEach((key) => {
        key.classList.remove("pressed");
      });
    };

    const playNote = (noteName: NoteName) => {
      sounds.instruments[activeInstrument].howl.play(noteName);
    };

    // Event Binding ---------------------------------------------//
    const handleClickNext = (e: MouseEvent) => {
      e.preventDefault();
      nextInstrument();
    };

    const handleClickPrev = (e: MouseEvent) => {
      e.preventDefault();
      prevInstrument();
    };

    const handleClickInstrument = (e: MouseEvent) => {
      e.preventDefault();
      setRandomInstrument();
    };

    const handleMouseDown = function (this: SVGElement, e: MouseEvent) {
      e.preventDefault();
      hideKeyboardLetters();
      isMouseDown = true;
      pressKey(this.id as NoteName);
    };

    const handleMouseEnter = function (this: SVGElement, e: MouseEvent) {
      e.preventDefault();
      if (isMouseDown) {
        pressKey(this.id as NoteName);
      }
    };

    const handleMouseOut = function (this: SVGElement, e: MouseEvent) {
      e.preventDefault();
      releaseKey(this.id as NoteName);
    };

    const handleTouchStart = function (this: SVGElement, e: TouchEvent) {
      e.preventDefault();
      hideKeyboardLetters();
      // isTouching = true;
      pressKey(this.id as NoteName);
    };

    // const handleTouchEnter = function (this: SVGElement, e: TouchEvent) {
    //   e.preventDefault();
    //   if (isTouching) {
    //     pressKey(this.id as NoteName);
    //   }
    // };

    // const handleTouchMove = (e: TouchEvent) => {
    // TODO: Fix
    // let touch = e.originalEvent.touches[0];
    // pressKeyMatchingCoords(touch.clientX, touch.clientY);
    // };

    const handleMouseUp = () => {
      isMouseDown = false;
      releaseAllKeys();
    };

    const handleTouchEnd = () => {
      // isTouching = false;
      releaseAllKeys();
    };

    const handleKeyDown = (e: KeyboardEvent) => {
      if (
        synth?.dataset.loading === "false" &&
        synth?.matches(":focus-within")
      ) {
        hideKeyboardLetters();
        switch (e.key) {
          case "ArrowLeft":
            e.preventDefault();
            prevInstrument();
            break;
          case "ArrowRight":
            e.preventDefault();
            nextInstrument();
            break;
          case "a":
          case "A":
            e.preventDefault();
            pressKey("C3");
            break;
          case "w":
          case "W":
            e.preventDefault();
            pressKey("Csharp3");
            break;
          case "s":
          case "S":
            e.preventDefault();
            pressKey("D3");
            break;
          case "e":
          case "E":
            e.preventDefault();
            pressKey("Dsharp3");
            break;
          case "d":
          case "D":
            e.preventDefault();
            pressKey("E3");
            break;
          case "f":
          case "F":
            e.preventDefault();
            pressKey("F3");
            break;
          case "t":
          case "T":
            e.preventDefault();
            pressKey("Fsharp3");
            break;
          case "g":
          case "G":
            e.preventDefault();
            pressKey("G3");
            break;
          case "y":
          case "Y":
            e.preventDefault();
            pressKey("Gsharp3");
            break;
          case "h":
          case "H":
            e.preventDefault();
            pressKey("A3");
            break;
          case "u":
          case "U":
            e.preventDefault();
            pressKey("Asharp3");
            break;
          case "j":
          case "J":
            e.preventDefault();
            pressKey("B3");
            break;
          case "k":
          case "K":
            e.preventDefault();
            pressKey("C4");
            break;
          case "o":
          case "O":
            e.preventDefault();
            pressKey("Csharp4");
            break;
          case "l":
          case "L":
            e.preventDefault();
            pressKey("D4");
            break;
          case "p":
          case "P":
            e.preventDefault();
            pressKey("Dsharp4");
            break;
          case ";":
          case ":":
            e.preventDefault();
            pressKey("E4");
            break;
          default:
            break;
        }
      }
    };

    const handleKeyUp = (e: KeyboardEvent) => {
      if (
        synth &&
        synth.dataset.loading === "false" &&
        synth.matches(":focus-within")
      ) {
        switch (e.key) {
          case "a":
          case "A":
            releaseKey("C3");
            break;
          case "w":
          case "W":
            releaseKey("Csharp3");
            break;
          case "s":
          case "S":
            releaseKey("D3");
            break;
          case "e":
          case "E":
            releaseKey("Dsharp3");
            break;
          case "d":
          case "D":
            releaseKey("E3");
            break;
          case "f":
          case "F":
            releaseKey("F3");
            break;
          case "t":
          case "T":
            releaseKey("Fsharp3");
            break;
          case "g":
          case "G":
            releaseKey("G3");
            break;
          case "y":
          case "Y":
            releaseKey("Gsharp3");
            break;
          case "h":
          case "H":
            releaseKey("A3");
            break;
          case "u":
          case "U":
            releaseKey("Asharp3");
            break;
          case "j":
          case "J":
            releaseKey("B3");
            break;
          case "k":
          case "K":
            releaseKey("C4");
            break;
          case "o":
          case "O":
            releaseKey("Csharp4");
            break;
          case "l":
          case "L":
            releaseKey("D4");
            break;
          case "p":
          case "P":
            releaseKey("Dsharp4");
            break;
          case ";":
          case ":":
            releaseKey("E4");
            break;
          default:
            break;
        }
      }
    };

    const bindEvents = () => {
      prevArrow?.addEventListener("click", handleClickPrev);
      nextArrow?.addEventListener("click", handleClickNext);
      synth?.addEventListener("mouseup", handleMouseUp);
      synth?.addEventListener("touchend", handleTouchEnd);
      keys?.forEach((key) => {
        key.addEventListener("mousedown", handleMouseDown);
        key.addEventListener("mouseenter", handleMouseEnter);
        key.addEventListener("mouseout", handleMouseOut);
        key.addEventListener("touchstart", handleTouchStart);
        // key.addEventListener("touchenter", handleTouchEnter); FIX
        // key.addEventListener("touchmove", handleTouchMove);
      });
      instrumentIconWrapper?.addEventListener("click", handleClickInstrument);
      document.addEventListener("keydown", handleKeyDown);
      document.addEventListener("keyup", handleKeyUp);
    };

    function startSynth() {
      enableSynth();
      bindEvents();

      const audioContext = window.AudioContext
        ? new window.AudioContext()
        : null;
      unmute(audioContext, false, false);
    }

    startSynth();

    function unloadSynth() {
      const unloadSounds = () => {
        for (const [_key, value] of Object.entries(sounds.ui)) {
          value.howl.unload();
        }

        for (const [_key, value] of Object.entries(sounds.instruments)) {
          value.howl.unload();
        }
      };

      clearTimeout(timeout);
      unloadSounds();
    }

    document.addEventListener("astro:before-swap", unloadSynth);
  }

  document.addEventListener("astro:page-load", prepareLoadSynth);
</script>

<div
  id="synth"
  class="synth"
  tabindex="0"
  data-enabled="false"
  data-loading="false"
>
  <svg
    width="100%"
    viewBox="0 0 270 156"
    version="1.1"
    xmlns="http://www.w3.org/2000/svg"
  >
    <SynthBase />
    <SynthKeyboard />
    <SynthScreen />
  </svg>
</div>

<style lang="scss">
  // Theme
  .synth {
    width: 100%;
    max-width: 540px;

    --synth-whitekey: var(--gray-1);
    --synth-whitekey-pressed: var(--gray-2);
    --synth-blackkey: var(--gray-12);
    --synth-blackkey-pressed: var(--gray-11);
    --synth-base: var(--gray-1);
    --synth-stroke: var(--gray-12);
    --synth-lcd-bg: var(--gray-4);
    --synth-lcd-light: var(--gray-2);
    --synth-lcd-medium: var(--gray-11);
    --synth-lcd-dark: var(--gray-12);
    --synth-keyletter: var(--gray-12);

    :global(.dark) & {
      --synth-whitekey: var(--gray-12);
      --synth-whitekey-pressed: white;
      --synth-blackkey: var(--gray-1);
      --synth-blackkey-pressed: var(--gray-4);
      --synth-base: var(--gray-12);
      --synth-stroke: var(--gray-1);
      --synth-lcd-bg: var(--gray-12);
      --synth-lcd-light: white;
      --synth-lcd-medium: var(--gray-9);
      --synth-lcd-dark: var(--gray-3);
      --synth-keyletter: var(--gray-4);
    }

    &[data-loading="true"] {
      pointer-events: none;
      cursor: default;
    }

    &:focus,
    &:focus-within {
      outline: none;
    }

    svg {
      overflow: visible;
    }
  }
</style>

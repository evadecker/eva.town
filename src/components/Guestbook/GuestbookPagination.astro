---
import { count, db, eq, Guestbook as GuestbookDB, isNull, or } from "astro:db";
import Center from "../Center.astro";
import { Icon } from "../Icon/Icon";

const currentPage = Number(Astro.props.currentPage) || 1;

const baseEntriesPerPage = 24;

const entryCount = await db
  .select({ count: count() })
  .from(GuestbookDB)
  .where(or(eq(GuestbookDB.isSpam, false), isNull(GuestbookDB.isSpam)));
const totalEntries = entryCount[0].count;
const remainingEntries = Math.max(0, totalEntries - 1);
const totalPages = Math.max(
  1,
  Math.ceil(remainingEntries / baseEntriesPerPage),
);

const isLastPage = currentPage === totalPages;

const entriesSuffix = [
  "messages so far.",
  "little notes from across the globe.",
  "entries (and counting).",
  "notes from friends and strangers.",
  "thoughts posted.",
  "notes total.",
  "messages as of now.",
];

const totalEntriesText = `${totalEntries} ${
  entriesSuffix[Math.floor(Math.random() * entriesSuffix.length)]
}`;
const pageText = `Viewing page ${currentPage} of ${totalPages}.`;
---

<Center>
  {
    isLastPage ? (
      <div class="postscript">
        You've reached the end!
        <>
          <br />
          <a
            href="/posts/design-outside-the-computer"
            data-fathom="explanation"
          >
            Read how I made this guestbook.
          </a>
        </>
      </div>
    ) : (
      <div class="postscript">
        {totalEntriesText}
        <br />
        {pageText}
      </div>
    )
  }

  <div class="pagination">
    {
      currentPage > 1 && (
        <a
          aria-label="Previous page"
          href={
            currentPage === 2
              ? "/guestbook"
              : `/guestbook?page=${currentPage - 1}`
          }
        >
          <Icon icon="arrowLeft" />
        </a>
      )
    }
    {
      currentPage < totalPages && (
        <a aria-label="Next page" href={`/guestbook?page=${currentPage + 1}`}>
          <Icon icon="arrowRight" />
        </a>
      )
    }
  </div>
</Center>

<style lang="scss">
  .postscript {
    text-align: center;
    padding-block-start: var(--space-xl);
  }

  .pagination {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-s);
    padding-block-start: var(--space-m);

    a {
      cursor: pointer;
      border-radius: var(--radius-full);
      padding: var(--space-2xs) var(--space-m);
      background-color: var(--gray-12);
      color: var(--gray-1);
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: var(--space-2xs);
    }
  }
</style>
